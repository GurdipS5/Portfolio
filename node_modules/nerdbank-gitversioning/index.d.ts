/**
 * The various aspects of a version that can be calculated.
 */
export interface IGitVersion {
    cloudBuildNumber: string;
    cloudBuildNumberEnabled: boolean;
    buildMetadataWithCommitId: string;
    assemblyVersion: string;
    assemblyFileVersion: string;
    assemblyInformationalVersion: string;
    publicRelease: boolean;
    prereleaseVersion: string;
    simpleVersion: string;
    buildNumber: string;
    majorMinorVersion: string;
    gitCommitId: string;
    gitCommitIdShort: string;
    versionHeight: string;
    version: string;
    cloudBuildVersionVarsEnabled: boolean;
    cloudBuildVersionVars: string;
    buildMetadata: string;
    buildMetadataFragment: string;
    nuGetPackageVersion: string;
    npmPackageVersion: string;
    semVer1: string;
    semVer2: string;
}
/**
 * Gets an object describing various aspects of the version of a project.
 * @param projectDirectory The directory of the source code to get the version of.
 * @param dotnetCommand The location of the dotnet command line executable
 */
export declare function getVersion(projectDirectory?: string, dotnetCommand?: string): Promise<IGitVersion>;
/**
 * Sets an NPM package version based on the git height and version.json.
 * @param packageDirectory The directory of the package about to be published.
 * @param srcDirectory The directory of the source code behind the package, if different than the packageDirectory.
 * @param dotnetCommand The location of the dotnet command line executable
 */
export declare function setPackageVersion(packageDirectory?: string, srcDirectory?: string, dotnetCommand?: string): Promise<void>;
/**
 * Sets the package version to 0.0.0-placeholder, so as to obviously indicate
 * that the version isn't set in the source code version of package.json.
 * @param srcDirectory The directory of the source code behind the package, if different.
 */
export declare function resetPackageVersionPlaceholder(srcDirectory?: string): Promise<void>;
