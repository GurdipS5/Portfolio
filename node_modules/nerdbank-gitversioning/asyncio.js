'use string';
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mkdirIfNotExistAsync = exports.mkdirAsync = exports.existsAsync = void 0;
const fs = require("fs");
function existsAsync(path) {
    return new Promise(resolve => fs.exists(path, resolve));
}
exports.existsAsync = existsAsync;
;
function mkdirAsync(path) {
    return new Promise((resolve, reject) => fs.mkdir(path, err => {
        if (err) {
            reject(err);
        }
        else {
            resolve(null);
        }
    }));
}
exports.mkdirAsync = mkdirAsync;
function mkdirIfNotExistAsync(path) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!(yield existsAsync(path))) {
            yield mkdirAsync(path);
        }
    });
}
exports.mkdirIfNotExistAsync = mkdirIfNotExistAsync;

//# sourceMappingURL=asyncio.js.map
