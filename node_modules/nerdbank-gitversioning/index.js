'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resetPackageVersionPlaceholder = exports.setPackageVersion = exports.getVersion = void 0;
const camelCase = require("camel-case");
const asyncprocess_1 = require("./asyncprocess");
const core_1 = require("./core");
/**
 * Gets an object describing various aspects of the version of a project.
 * @param projectDirectory The directory of the source code to get the version of.
 * @param dotnetCommand The location of the dotnet command line executable
 */
function getVersion(projectDirectory, dotnetCommand) {
    return __awaiter(this, void 0, void 0, function* () {
        projectDirectory = projectDirectory || '.';
        var versionText = yield (0, asyncprocess_1.execAsync)(`${(0, core_1.getNbgvCommand)(dotnetCommand)} get-version --format json`, { cwd: projectDirectory });
        if (versionText.stderr) {
            throw versionText.stderr;
        }
        var directResult = JSON.parse(versionText.stdout);
        var result = {};
        for (var field in directResult) {
            result[camelCase.camelCase(field)] = directResult[field];
        }
        return result;
    });
}
exports.getVersion = getVersion;
/**
 * Sets an NPM package version based on the git height and version.json.
 * @param packageDirectory The directory of the package about to be published.
 * @param srcDirectory The directory of the source code behind the package, if different than the packageDirectory.
 * @param dotnetCommand The location of the dotnet command line executable
 */
function setPackageVersion(packageDirectory, srcDirectory, dotnetCommand) {
    return __awaiter(this, void 0, void 0, function* () {
        packageDirectory = packageDirectory || '.';
        srcDirectory = srcDirectory || packageDirectory;
        const gitVersion = yield getVersion(srcDirectory, dotnetCommand);
        console.log(`Setting package version to ${gitVersion.npmPackageVersion}`);
        var result = yield (0, asyncprocess_1.execAsync)(`npm version ${gitVersion.npmPackageVersion} --no-git-tag-version --allow-same-version`, { cwd: packageDirectory });
        if (result.stderr) {
            console.log(result.stderr);
        }
    });
}
exports.setPackageVersion = setPackageVersion;
/**
 * Sets the package version to 0.0.0-placeholder, so as to obviously indicate
 * that the version isn't set in the source code version of package.json.
 * @param srcDirectory The directory of the source code behind the package, if different.
 */
function resetPackageVersionPlaceholder(srcDirectory) {
    return __awaiter(this, void 0, void 0, function* () {
        srcDirectory = srcDirectory || '.';
        var result = yield (0, asyncprocess_1.execAsync)(`npm version 0.0.0-placeholder --no-git-tag-version --allow-same-version`, { cwd: srcDirectory });
        if (result.stderr) {
            console.log(result.stderr);
        }
    });
}
exports.resetPackageVersionPlaceholder = resetPackageVersionPlaceholder;

//# sourceMappingURL=index.js.map
