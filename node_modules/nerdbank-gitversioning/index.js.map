{"version":3,"sources":["../ts/index.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;;AAEb,wCAAwC;AACxC,iDAA2C;AAC3C,iCAAwC;AA+BxC;;;;GAIG;AACH,SAAsB,UAAU,CAAC,gBAAyB,EAAE,aAAsB;;QAC9E,gBAAgB,GAAG,gBAAgB,IAAI,GAAG,CAAC;QAC3C,IAAI,WAAW,GAAG,MAAM,IAAA,wBAAS,EAAC,GAAG,IAAA,qBAAc,EAAC,aAAa,CAAC,4BAA4B,EAAE,EAAE,GAAG,EAAE,gBAAgB,EAAE,CAAC,CAAA;QAC1H,IAAI,WAAW,CAAC,MAAM,EAAE;YACpB,MAAM,WAAW,CAAC,MAAM,CAAC;SAC5B;QAED,IAAI,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QAClD,IAAI,MAAM,GAAG,EAAE,CAAC;QAChB,KAAK,IAAI,KAAK,IAAI,YAAY,EAAE;YAC5B,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,GAAG,YAAY,CAAC,KAAK,CAAC,CAAC;SAC5D;QAED,OAAoB,MAAM,CAAC;IAC/B,CAAC;CAAA;AAdD,gCAcC;AAED;;;;;GAKG;AACH,SAAsB,iBAAiB,CAAC,gBAAyB,EAAE,YAAqB,EAAE,aAAsB;;QAC5G,gBAAgB,GAAG,gBAAgB,IAAI,GAAG,CAAC;QAC3C,YAAY,GAAG,YAAY,IAAI,gBAAgB,CAAC;QAChD,MAAM,UAAU,GAAG,MAAM,UAAU,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC;QACjE,OAAO,CAAC,GAAG,CAAC,8BAA8B,UAAU,CAAC,iBAAiB,EAAE,CAAC,CAAC;QAC1E,IAAI,MAAM,GAAG,MAAM,IAAA,wBAAS,EAAC,eAAe,UAAU,CAAC,iBAAiB,4CAA4C,EAAE,EAAE,GAAG,EAAE,gBAAgB,EAAE,CAAC,CAAC;QACjJ,IAAI,MAAM,CAAC,MAAM,EAAE;YACf,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;SAC9B;IACL,CAAC;CAAA;AATD,8CASC;AAED;;;;GAIG;AACH,SAAsB,8BAA8B,CAAC,YAAqB;;QACtE,YAAY,GAAG,YAAY,IAAI,GAAG,CAAC;QACnC,IAAI,MAAM,GAAG,MAAM,IAAA,wBAAS,EAAC,yEAAyE,EAAE,EAAE,GAAG,EAAE,YAAY,EAAE,CAAC,CAAC;QAC/H,IAAI,MAAM,CAAC,MAAM,EAAE;YACf,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;SAC9B;IACL,CAAC;CAAA;AAND,wEAMC","file":"index.js","sourcesContent":["'use strict';\r\n\r\nimport * as camelCase from 'camel-case';\r\nimport { execAsync } from './asyncprocess';\r\nimport { getNbgvCommand } from './core';\r\n\r\n/**\r\n * The various aspects of a version that can be calculated.\r\n */\r\nexport interface IGitVersion {\r\n    cloudBuildNumber: string,\r\n    cloudBuildNumberEnabled: boolean,\r\n    buildMetadataWithCommitId: string,\r\n    assemblyVersion: string,\r\n    assemblyFileVersion: string,\r\n    assemblyInformationalVersion: string,\r\n    publicRelease: boolean,\r\n    prereleaseVersion: string,\r\n    simpleVersion: string,\r\n    buildNumber: string,\r\n    majorMinorVersion: string,\r\n    gitCommitId: string,\r\n    gitCommitIdShort: string,\r\n    versionHeight: string,\r\n    version: string,\r\n    cloudBuildVersionVarsEnabled: boolean,\r\n    cloudBuildVersionVars: string,\r\n    buildMetadata: string,\r\n    buildMetadataFragment: string,\r\n    nuGetPackageVersion: string,\r\n    npmPackageVersion: string,\r\n    semVer1: string,\r\n    semVer2: string\r\n}\r\n\r\n/**\r\n * Gets an object describing various aspects of the version of a project.\r\n * @param projectDirectory The directory of the source code to get the version of.\r\n * @param dotnetCommand The location of the dotnet command line executable\r\n */\r\nexport async function getVersion(projectDirectory?: string, dotnetCommand?: string): Promise<IGitVersion> {\r\n    projectDirectory = projectDirectory || '.';\r\n    var versionText = await execAsync(`${getNbgvCommand(dotnetCommand)} get-version --format json`, { cwd: projectDirectory })\r\n    if (versionText.stderr) {\r\n        throw versionText.stderr;\r\n    }\r\n\r\n    var directResult = JSON.parse(versionText.stdout);\r\n    var result = {};\r\n    for (var field in directResult) {\r\n        result[camelCase.camelCase(field)] = directResult[field];\r\n    }\r\n\r\n    return <IGitVersion>result;\r\n}\r\n\r\n/**\r\n * Sets an NPM package version based on the git height and version.json.\r\n * @param packageDirectory The directory of the package about to be published.\r\n * @param srcDirectory The directory of the source code behind the package, if different than the packageDirectory.\r\n * @param dotnetCommand The location of the dotnet command line executable\r\n */\r\nexport async function setPackageVersion(packageDirectory?: string, srcDirectory?: string, dotnetCommand?: string) {\r\n    packageDirectory = packageDirectory || '.';\r\n    srcDirectory = srcDirectory || packageDirectory;\r\n    const gitVersion = await getVersion(srcDirectory, dotnetCommand);\r\n    console.log(`Setting package version to ${gitVersion.npmPackageVersion}`);\r\n    var result = await execAsync(`npm version ${gitVersion.npmPackageVersion} --no-git-tag-version --allow-same-version`, { cwd: packageDirectory });\r\n    if (result.stderr) {\r\n        console.log(result.stderr);\r\n    }\r\n}\r\n\r\n/**\r\n * Sets the package version to 0.0.0-placeholder, so as to obviously indicate\r\n * that the version isn't set in the source code version of package.json.\r\n * @param srcDirectory The directory of the source code behind the package, if different.\r\n */\r\nexport async function resetPackageVersionPlaceholder(srcDirectory?: string) {\r\n    srcDirectory = srcDirectory || '.';\r\n    var result = await execAsync(`npm version 0.0.0-placeholder --no-git-tag-version --allow-same-version`, { cwd: srcDirectory });\r\n    if (result.stderr) {\r\n        console.log(result.stderr);\r\n    }\r\n}\r\n"]}